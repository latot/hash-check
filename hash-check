#!/usr/bin/env python

from hashcheck import HashCheck

import pp
import argparse
import logging

LOG_FORMAT = "%(asctime)s [%(levelname)s] %(message)s"
logging.basicConfig(format=LOG_FORMAT, level=logging.DEBUG, filename="hash-check.log")

if __name__ == '__main__':
    opts = argparse.ArgumentParser(description='pyHashCheck')

    opts.add_argument('torrent', metavar='TORRENT', help='path to torrent file', nargs=1)
    opts.add_argument('--path', default='.', metavar='PATH', help='path to torrent data', nargs=1)

    options = opts.parse_args()

    if len(options.torrent) != 1:
        logging.error('Invalid torrent file "%s"' % ' '.join(options.path))
        opts.print_usage()
        exit()

    hc = HashCheck(options.torrent[0])

    logging.info('starting hash check: %s pieces in %s files' % (hc.piece_count, len(hc.file_list)))
    hc.check(options.path[0])

    server = pp.Server()
    imports = ('hashlib', 'logging', 'os')

    step = 100
    datas = []
    for x in xrange(0, hc.piece_count, step):
        f = server.submit(hc.check_chunks, (x, step), (), imports)
        datas.append(f)

    for x in datas:
        output = x()
        for y in output:
            if y['status'] != 'ok':
                print y
                exit()
